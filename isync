#!/usr/bin/env python2

import gpod
import mutagen
import eyeD3.mp3
import os
import posixpath
import struct
import sys

from stat import *
from optparse import OptionParser
from hashlib import sha256

def file_hash(filename):
    """Return an SHA256 hash on the first 16k of a file."""
    import struct
    # only hash the first 16k
    hash_len = 4*4096
    hash = sha256()
    size = os.path.getsize(filename)
    hash.update(struct.pack("<L", size))
    hash.update(open(filename).read(hash_len))
    return hash.hexdigest()

class gapless(object):
    CHUNK_SIZE = 8192
    FRAME_HEADER_SIZE = 4
    MIN_FRAME_SIZE = 21
    MIN_FRAMES = 8
    LAME_TAG_SIZE = 0x24

    class mp3header(object):
        def __init__(self, data, offset):
            self.valid = False
            self.offset = offset
            if len(data) == 4:
                b = struct.unpack('4B', data)
                self.version = (b[1] >> 3) & 1 if b[1] & 0x10 else 2
                if (b[0] << 4) | ((b[1] & 0xE0) >> 4) == 0xFFE and (b[1] >> 1) & 3 in (0, 1):
                    self._bitrate = (b[2] >> 4) & 0x0F
                    self._freq = (b[2] >> 2) & 0x3
                    self.padding = (b[2] >> 1) & 0x1
                    self.mode = (b[3] >> 6) & 0x3
                    self.length = 72000*((self.version & 1) + 1)*self.bitrate/self.frequency + self.padding
                    if self.length >= gapless.MIN_FRAME_SIZE:
                        self.valid = True

        @property
        def bitrate(self):
            return ((0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 0), \
                    (0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 0))[self.version & 1][self._bitrate]

        @property
        def frequency(self):
            return ((22050, 24000, 16000, 50000), \
                    (44100, 48000, 32000, 50000), \
                    (11025, 12000,  8000, 50000))[self.version][self._freq]

    def __seek_sync(self):
        data = self.__fp.read(gapless.CHUNK_SIZE)
        while data:
            sync = data.find('\xff')
            if sync >= 0:
                self.__fp.seek(sync - gapless.CHUNK_SIZE, os.SEEK_CUR)
                return True
            data = self.__fp.read(gapless.CHUNK_SIZE)
        return False

    def __get_header(self):
        pos = self.__fp.tell()
        return gapless.mp3header(self.__fp.read(gapless.FRAME_HEADER_SIZE), pos)

    def __seek_first_header(self):
        while self.__seek_sync():
            h = self.__get_header()
            if h.valid:
                return h
        return None

    def __seek_next_header(self, header):
        self.__fp.seek(header.length - gapless.FRAME_HEADER_SIZE, os.SEEK_CUR)
        return self.__get_header()

    def __read_lame_tag(self, header):
        offset = header.offset + ((21, 13), (36, 21))[header.version & 0x1][(header.mode >> 1) & 0x1]
        self.__fp.seek(offset, os.SEEK_SET)
        id = self.__fp.read(4)
        if id not in ('Xing', 'Info'):
            return False
        flags = struct.unpack('>I', self.__fp.read(4))[0]
        skip = 0
        if flags & 0x1:
            skip += 4
        if flags & 0x2:
            skip += 4
        if flags & 0x4:
            skip += 100
        if flags & 0x8:
            skip += 4
        self.__fp.seek(skip, os.SEEK_CUR)
        lame = self.__fp.read(gapless.LAME_TAG_SIZE)
        if len(lame) != gapless.LAME_TAG_SIZE or not lame.startswith('LAME'):
            return False
        b = struct.unpack('{0}B'.format(gapless.LAME_TAG_SIZE), lame)
        self.pregap = (b[0x15] << 4) + (b[0x16] >> 4)
        self.postgap = ((b[0x16] & 0xf) << 8) + b[0x17]
        return True

    def __init__(self, filename):
        self.valid = 0
        self.__fp = open(filename)
        headers = list()
        h = self.__seek_first_header()
        while h and h.valid:
            headers.append(h)
            h = self.__seek_next_header(h)
        if len(headers) > gapless.MIN_FRAMES:
            if self.__read_lame_tag(headers[0]):
                self.valid = 1
                self.gapless_data = sum([i.length for i in headers[:-8]])
                self.samplecount = (len(headers) - 1)*(576, 1152)[headers[0].version & 1] - self.pregap - self.postgap

    def __repr__(self):
        return '<gapless valid:{0.valid!r} pregap:{0.pregap!r} postgap:{0.postgap!r} gapless_data:{0.gapless_data!r} samplecount:{0.samplecount!r}>'.format(self)

class metadata(object):
    def __init__(self, filename):
        self.__m = mutagen.File(filename, easy = True)
        for k, v in self.__m.iteritems():
            setattr(self, k, v[0])

class collection(object):
    def __init__(self):
        self.art = dict()
        self.media = dict()
        self.stale = list()
        self.noart = list()

    def __repr__(self):
        return '<collection art:{0.art!r} media:{0.media!r}>'.format(self)

class isync(object):
    def __init__(self, opt):
        self.opt = opt
        self.__db = None
        self.__music_dir = gpod.itdb_get_music_dir(self.opt.mountpoint)

    @property
    def db(self):
        if self.__db is None:
            print '[+] Loading iPod database...'
            self.__db = gpod.Database(self.opt.mountpoint)
        return self.__db

    def initialise(self, name):
        print '[+] Initialising iPod [{1}] at {0}'.format(self.opt.mountpoint, name)
        if itdb_init_ipod(self.opt.mountpoint, None, name):
            print "[+] Success"
            return 0
        else:
            print "[-] Failed"
            return 1

    def ls(self):
        for t in self.db.get_master():
            print '{1:<30} {0[size]:>10} {0[filetype]:<20} {0[artist]} - {0[title]}'.format(t, t.ipod_filename())
        return 0

    def info(self):
        dev = gpod.itdb_device_new()
        gpod.itdb_device_set_mountpoint(dev, self.opt.mountpoint)
        info = gpod.itdb_device_get_ipod_info(dev)
        print '{0} [{1}] {2} GB'.format(gpod.itdb_info_get_ipod_model_name_string(info.ipod_model), \
                                        info.model_number, info.capacity)
        gpod.itdb_device_free(dev)

    def __scan_path(self, *paths):
        rv = collection()
        media = list()
        for path in paths:
            sys.stdout.write('[+] Scanning {0}...'.format(path))
            sys.stdout.flush()
            for root, dirs, files in os.walk(path):
                for f in files:
                    if f == 'cover.jpg':
                        rv.art[root] = f
                    if f.endswith(('.mp3', '.mp4')):
                        media.append((root, f))
                sys.stdout.write('\r[+] Scanning {0}... {1} media file(s) found'.format(path, len(media)))
                sys.stdout.flush()
            sys.stdout.write('\n')
        sys.stdout.write('[+] Hashing media files...')
        sys.stdout.flush()
        i = 0
        for f in media:
            full = posixpath.join(*f)
            rv.media[file_hash(full)] = f
            i += 1
            sys.stdout.write('\r[+] Hashing media files... {0}/{1}'.format(i, len(media)))
            sys.stdout.flush()
        sys.stdout.write('\n')
        return rv

    def __scan_database(self, hashes):
        rv = collection()
        plst = self.db.get_master()
        print '[+] Mapping database tracks...'
        for t in plst:
            fn = t.ipod_filename()
            if fn and hashes.has_key(fn):
                rv.media[hashes[fn]] = t
            else:
                rv.stale.append(t)
            if not t.get_coverart():
                rv.noart.append((t, hashes.get(fn, None)))
        return rv

    def copy_progress(self, db, track, i, n):
        sys.stdout.write('\r[+] Copying files to iPod... {0}/{1}'.format(i, n))
        sys.stdout.flush()

    def __mediatype(self, filename):
        # TODO: support for audiobooks, movies, etc...
        if filename.endswith('.mp4'):
            return gpod.ITDB_MEDIATYPE_MUSICVIDEO
        else:
            return gpod.ITDB_MEDIATYPE_AUDIO

    def repair(self):
        fixed_mediatype = 0
        fixed_gapless = [0, 0]
        print '[+] Checking database for problems'
        for t in self.db.get_master():
            fn = t.ipod_filename()
            mt = self.__mediatype(fn)
            if not mt == t['mediatype']:
                if self.opt.verbose:
                    print 'wrong mediatype for {0}: {1} -> {2}'.format(fn, t['mediatype'], mt)
                if not self.opt.dryrun:
                    t['mediatype'] = mt
                fixed_mediatype += 1
            if not t['gapless_track_flag']:
                fixed_gapless[1] += 1
                if self.opt.verbose:
                    print 'no gapless information for {0}: {1} - {2}'.format(fn, t['artist'], t['title'])
                gl = gapless(fn)
                if gl.valid:
                    if not self.opt.dryrun:
                        t['gapless_track_flag'] = 1
                        t['pregap'] = gl.pregap
                        t['postgap'] = gl.postgap
                        t['samplecount'] = gl.samplecount
                        t['gapless_data'] = gl.gapless_data
                    fixed_gapless[0] += 1
        if fixed_mediatype or fixed_gapless:
            if fixed_mediatype:
                print '[+] Fixed {0} item(s) with wrong mediatype'.format(fixed_mediatype)
            if fixed_gapless:
                print '[+] Fixed {0}/{1} item(s) without gapless information'.format(*fixed_gapless)
            print '[+] Saving and closing iPod database...'
            if not self.opt.dryrun:
                self.db.close()
        else:
            print '[+] No problems detected'
        return 0

    def dump(self):
        for t in self.db.get_master():
            print '-----------------------------------------'
            for k, v in t.iteritems():
                print '{0} = {1!r}'.format(k, v)
        return 0

    def sync(self, *paths):
        local = self.__scan_path(*paths)
        ipod = self.__scan_path(self.__music_dir)

        ihash = dict((posixpath.join(*v), k) for k, v in ipod.media.iteritems())
        database = self.__scan_database(ihash)

        noart = list()
        for i in database.noart:
            media = None
            if i[1]:
                media = local.media.get(i[1], None)
            noart.append((i[0], media))

        print '[+] Computing changesets...'
        lh = set(local.media.keys())
        ih = set(ipod.media.keys())
        dh = set(database.media.keys())

        orphaned = [posixpath.join(*ipod.media[t]) for t in ih - dh]
        old = [database.media[t] for t in dh - lh]
        new = [(local.media[t], os.stat(posixpath.join(*local.media[t]))) for t in lh - dh]

        old = sorted(old, key = lambda t: t['time_modified'])
        new = sorted(new, key = lambda t: t[1].st_mtime)

        if orphaned:
            print '[+] Unlinking {0} orphaned file(s)...'.format(len(orphaned))
            for o in orphaned:
                try:
                    if not self.opt.dryrun:
                        os.unlink(o)
                    if self.opt.verbose:
                        print 'unlinked {0}'.format(o)
                except:
                    print 'failed to unlink {0}'.format(o)

        if database.stale:
            print '[+] Removing {0} stale item(s) from database...'.format(len(database.stale))
            for s in database.stale:
                if self.opt.verbose:
                    print 'stale: {0[artist]} - {0[album]} - {0[title]}'.format(s)
                if not self.opt.dryrun:
                    try:
                        self.db.remove(s, quiet = not self.opt.verbose)
                    except DatabaseException as e:
                        print '[-] %s' % e

        if old and self.opt.delete:
            print '[+] Removing {0} old item(s) from database...'.format(len(old))
            for o in old:
                if self.opt.verbose:
                    print 'old: {0[artist]} - {0[album]} - {0[title]}'.format(o)
                if not self.opt.dryrun:
                    try:
                        self.db.remove(o, quiet = not self.opt.verbose)
                    except DatabaseException as e:
                        print '[-] %s' % e

        if new:
            print '[+] Adding {0} new item(s) to database...'.format(len(new))
            for n in new:
                if self.opt.verbose:
                    print 'new: {0}'.format(posixpath.join(*n[0]))
                media = n[0]
                try:
                    fn = posixpath.join(*media)
                    m = metadata(fn)
                    if not self.opt.dryrun:
                        t = self.db.new_Track(filename = fn)
                        t['mediatype'] = self.__mediatype(media[1])
                        for attr in ['title', 'artist', 'album', 'genre']:
                            v = getattr(m, attr, None)
                            if v:
                                t[attr] = v
                        gl = gapless(fn)
                        if gl.valid:
                            t['gapless_track_flag'] = 1
                            t['pregap'] = gl.pregap
                            t['postgap'] = gl.postgap
                            t['samplecount'] = gl.samplecount
                            t['gapless_data'] = gl.gapless_data
                        noart.append((t, media))
                except DatabaseException as e:
                    print '[-] %s' % e

            sys.stdout.write('[+] Copying files to iPod...')
            sys.stdout.flush()
            if not self.opt.dryrun:
                self.db.copy_delayed_files(self.copy_progress)
            sys.stdout.write('\n')

        found_art = 0
        if noart:
            print '[+] Checking {0} item(s) without thumbnails...'.format(len(noart))
            for n in noart:
                media = n[1]
                art = None
                if media:
                    art = local.art.get(media[0], None)
                if art:
                    art = posixpath.join(media[0], art);
                    if self.opt.verbose:
                        print 'setting cover: {0}'.format(art)
                    if not self.opt.dryrun:
                        n[0].set_coverart_from_file(art)
                    found_art += 1
                elif self.opt.verbose:
                    print 'no cover for: {0[artist]} - {0[album]}'.format(n[0])
            if found_art:
                print '[+] Updated thumbnails for {0}/{1} item(s)'.format(found_art, len(noart))

        if database.stale or old or new or found_art:
            print '[+] Saving and closing iPod database...'
            if not self.opt.dryrun:
                self.db.close()

        print '[+] Synchronisation successful'

        return 0

# TODO: - interactive shell with completion :)
#       - caching of hash tables (to avoid re-hashing)
#       - simple "add" operation that avoids scanning completely
#       - use primitives that avoid the gtkpod ext db (faster?)
#       - duplicates detection
#       - generate preview image from videos?
if __name__ == '__main__':
    usage = "Usage: %prog [options] cmd [args]"

    parser = OptionParser(add_help_option = False, usage = usage)

    parser.add_option('-m', '--mountpoint', dest='mountpoint', help='iPod mount point [default: %default]',
                                            default='/mnt/ipod', metavar='PATH')
    # TODO:
    ## parser.add_option('-a', '--ask',        dest='ask',        help='ask before performing write actions',
    ##                                         default=False, action='store_true')
    parser.add_option(      '--dry-run',    dest='dryrun',     help='do not perform any write actions',
                                            default=False, action='store_true')
    parser.add_option(      '--delete',     dest='delete',     help='delete files from iPod',
                                            default=False, action='store_true')
    parser.add_option('-v', '--verbose',    dest='verbose',    help='show verbose output',
                                            default=False, action='store_true')
    parser.add_option('-h', '--help',       dest='help',     help='show this help message', 
                                            default=False, action='store_true')

    (opt, args) = parser.parse_args()

    if opt.help or not args:
        parser.print_help()
        print '''
Commands:
  info                  display device info
  ls                    list iPod contents
  initialise <name>     initialise device (deletes all tracks)
  repair                try to repair certain database problems
  sync [paths]          synchronise device with paths
'''
        sys.exit(0)

    try:
        sys.exit(getattr(isync(opt), args.pop(0))(*args))
    except Exception as e:
        print '[-] %s' % e
        sys.exit(2)
